app:
  resources:
    - github.com
    - stackoverflow.com
  database-access-type: jdbc
  scheduler:
    enable: true
    interval: 10s
    force-check-delay: 10s
  use-queue: true

spring:
  application:
    name: scrapper
  liquibase:
    enabled: false
  datasource:
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  cache:
    cache-names:
      - buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider

bucket4j:
  enabled: true
  filters:
    - cache-name: buckets
      url: (/links.*)|(/tg-chat.*)
      strategy: first
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: "getRemoteAddr()"
          bandwidths:
            - capacity: 5
              time: 5
              unit: seconds

kafka:
  topic: messages.updates
  bootstrap-servers: localhost:29091, localhost:29092
  client-id: scrapper
  acks-mode: all
  delivery-timeout: 60s
  linger-ms: 12_000
  batch-size: 100_000
  enable-idempotence: true # to handle specific retry errors

server:
  port: 8080

springdoc:
  swagger-ui:
    path: /swagger-ui.html

client:
  bot:
    base-url: http://localhost:8090
    retry-policy:
      backoff-type: linear
      max-attempts: 2
      delay: 1s
      statuses: 500-506
  github:
    base-url: https://api.github.com/
    retry-policy:
      backoff-type: exponential
      max-attempts: 3
      delay: 1s
      statuses: 502-503
  stackoverflow:
    base-url: https://api.stackexchange.com/2.3/
    retry-policy:
      backoff-type: constant
      max-attempts: 5
      delay: 1s
      statuses: 500-500

logging:
  config: classpath:log4j2-plain.xml
