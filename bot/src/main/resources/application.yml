app:
  resources:
    - github.com
    - stackoverflow.com
  telegram-token: ${TOKEN}
  scrapper-topic:
    name: messages.updates

retry:
  max-attempts: 2
  backoff-type: constant
  increment: 5s
  base-delay: 10s
  max-delay: 100s
  multiplier: 2.2
  statuses: 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 520, 521, 522, 523, 524, 525, 526

kafka:
  bootstrap-servers: localhost:29091, localhost:29092
  group-id: bot
  auto-offset-reset: latest
  max-poll-interval-ms: 300_000
  enable-auto-commit: false
  concurrency: 2
  dlq:
    topic: messages.updates_dlq
    replications: 2
    partitions: 2
    acks-mode: all
    delivery-timeout: 60s
    linger-ms: 12_000
    batch-size: 100_000

management:
  server:
    port: 8091
  metrics:
    tags:
      application: ${spring.application.name}
  endpoints:
    web:
      base-path: /
      exposure:
        include: "info,health,prometheus"
      path-mapping:
        prometheus: "metrics"

spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  liquibase:
    enabled: false
  cache:
    cache-names:
      - buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider

bucket4j:
  enabled: true
  filters:
    - cache-name: buckets
      url: /updates.*
      strategy: first
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: "getRemoteAddr()"
          bandwidths:
            - capacity: 5
              time: 5
              unit: seconds

server:
  port: 8090

springdoc:
  swagger-ui:
    path: /swagger-ui.html

scrapper:
  base-url: https://localhost:8080

logging:
  config: classpath:log4j2-plain.xml
